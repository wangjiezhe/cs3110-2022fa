module type Queue = sig
  type 'a t
  val empty : 'a t
  val is_empty : 'a t -> bool
  val front : 'a t -> 'a
  val enq : 'a -> 'a t -> 'a t
  val deq : 'a t -> 'a t
end

module ListQueue : Queue = struct
  type 'a t = 'a list
  let empty = []
  let is_empty q = q = []
  let front = List.hd
  let enq x q = q @ [x]
  let deq = List.tl
end



Algebraic specifications:

1. is_empty empty = true
2. is_empty (enq x q) = false
3. front (enq x q)
    = x          if q is empty
    = front q    if q is not empty
4. deq (enq x q)
    = empty           if q is empty
    = enq x (deq q)   if q is not empty



Proof:

(Skip proof for 1,2,3.)

Proof for 4a:
  deq (enq x empty)
=   { evaluation of empty and enq}
  deq ([] @ [x])
=   { evaluation of @ }
  deq [x]
=   { evaluation of deq }
  []
=   { evaluation of empty }
  empty

Proof for 4b:
  deq (enq x q)
=  { evaluation of enq and deq }
  List.tl (q @ [x])
=  { lemma, below, and q <> [] }
  (List.tl q) @ [x]

  enq x (deq q)
=  { evaluation }
  (List.tl q) @ [x]

    Lemma: if xs <> [], then List.tl (xs @ ys) = (List.tl xs) @ ys.
    Proof: if xs <> [], then xs = h :: t for some h and t.

      List.tl ((h :: t) @ ys)
    =   { evaluation of @ }
      List.tl (h :: (t @ ys))
    =   { evaluation of tl }
      t @ ys

      (List.tl (h :: t)) @ ys
    =   { evaluation of tl }
      t @ ys

    QED

QED